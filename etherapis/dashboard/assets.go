// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package dashboard

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x4b\x6f\xe3\x36\x10\xbe\xef\xaf\x60\x85\x02\x91\x01\x8b\xb4\xf7\xd5\x85\x6b\x19\xd8\xdd\xe4\x90\xc3\x3e\xd0\xdd\x02\xed\x91\xa2\xc6\x16\xbd\x14\xa9\x25\x29\x3b\x81\xe1\xff\x5e\x92\x92\x1d\x39\x96\x11\x37\x75\x73\x31\x35\x1c\xce\xe3\x9b\x6f\x86\xcc\xf4\x97\xeb\x2f\x1f\xbf\xff\xfd\xf5\x06\x15\xb6\x14\xb3\x17\x53\xff\x83\x04\x95\x8b\x34\x02\x19\xcd\x5e\x20\x34\x2d\x80\xe6\x7e\xe1\x96\x25\x58\x8a\x58\x41\xb5\x01\x9b\x46\xb5\x9d\x27\xef\xa2\xee\x56\x61\x6d\x95\xc0\xcf\x9a\xaf\xd2\xe8\xaf\xe4\xcf\xf7\xc9\x47\x55\x56\xd4\xf2\x4c\x40\x84\x98\x92\x16\xa4\x3b\x77\x7b\x93\x42\xbe\x80\x83\x93\x92\x96\x90\x46\x2b\x0e\xeb\x4a\x69\xdb\x51\x5e\xf3\xdc\x16\x69\x0e\x2b\xce\x20\x09\x1f\x43\xc4\x25\xb7\x9c\x8a\xc4\x30\x2a\x20\x1d\x3b\x43\x8d\x25\xcb\xad\x80\xd9\x8d\x2d\x40\xa3\xf7\x5f\x6f\x0d\xba\xa6\xa6\xc8\x14\xd5\xf9\x94\x34\x7b\xad\xa2\xe0\xf2\x07\xd2\x20\xd2\xc8\xd8\x7b\x01\xa6\x00\x70\x3e\x0b\x0d\xf3\x34\xf2\x39\x98\x09\x21\x2c\x97\x4b\x83\x99\x50\x75\x3e\x17\x54\x03\x66\xaa\x24\x74\x49\xef\x88\xe0\x99\x21\x99\x52\xd6\xac\xa9\x65\x05\x79\x85\x5f\xe1\xb7\xc4\x08\x6a\xa1\x11\x5b\x4d\x2b\x5c\x72\x89\x99\x31\xbb\x2c\x2f\xe0\x72\xee\x30\x49\xe8\x1a\x8c\x2a\x81\xbc\xc6\x6f\xf0\x88\x38\x07\x07\xe2\x8e\xd7\xc6\xad\x61\x9a\x57\x16\x19\xcd\xce\x76\xa3\x81\x32\x4b\x46\x78\xfc\x1a\xff\xd6\x7c\xe0\xa5\x33\x38\x25\x8d\xad\xd9\x05\x0d\x27\xb9\x2a\x2f\x64\x3c\xa3\x19\x88\x84\x29\x0d\xe4\x0d\x7e\x87\x5f\xbe\x22\x99\x56\x6b\x03\x3a\x40\x72\x19\x1f\xcb\x9f\x35\xe8\x7b\xf2\x12\x8f\xf1\xb8\xfd\xb8\xa0\xf5\xd2\xd5\x4f\x7a\xac\xbd\x83\x31\x7e\xb9\x13\x5c\xce\x83\x5d\x73\x6b\x41\x27\x7b\x92\xb6\xd4\x5d\x9a\x47\xbc\x7d\xec\x6e\x4a\x76\x43\x60\x9a\xa9\xfc\xbe\x8d\x20\xe7\x2b\xc4\xf3\x34\x6a\x7b\xd5\x1f\x71\xa2\x43\xe6\x35\xaa\x08\xf9\x20\x50\x8a\xe6\xb5\x64\x96\x2b\x19\xd7\x5a\x0c\x91\xa9\x19\x03\x63\x06\x68\xd3\x6a\x21\xf4\x2b\xf6\x9a\xf1\xc6\xed\x4f\x50\x50\xca\xa9\xa5\xdf\xef\x2b\x98\xa0\xab\xa5\x51\xf2\x6a\x88\x18\x65\x85\xfb\x9c\x53\x61\x60\x6f\x64\xb2\x5b\x0c\xf7\xb6\x10\x02\xad\x95\x9e\x3c\x78\xbd\x2b\xb4\x3b\x60\xa9\xad\xcd\xd0\x6f\x76\x3d\xfb\x3f\x97\x89\x51\x02\x70\x38\xd7\xc6\xf8\xa0\x8d\xad\xfa\x66\x35\x97\x8b\x78\x30\xf8\xbd\x73\x6e\x8b\x33\x2e\xf3\xd8\x16\xdc\x0c\xf6\xe2\xed\x5e\x65\xdb\xe0\xb1\x87\xf3\xa0\x7c\xd6\x65\x96\x46\x16\xee\x6c\xc3\xe0\x68\x07\xd8\x8a\x6a\x14\x26\x19\xd4\xe5\x57\x00\x6d\x1c\x7a\x7f\x84\x66\x64\xae\x75\x2c\x7c\x14\xd4\x98\xf8\x21\x7c\x37\x48\xb4\x9b\x2a\x41\xb5\x93\xf1\x61\x86\x01\x5b\x1f\x27\xae\xb4\xaa\x0c\x0e\x19\xee\x75\x3d\xd2\x4e\x1f\x05\x05\x37\xe1\xbf\xb9\xd4\x21\xde\x78\xf1\x24\x94\x01\x0b\x90\x0b\x5b\xb8\xd4\x0e\x72\xee\x80\xb1\x7d\x40\x7f\x01\xf6\xb6\x99\xd3\xc1\xce\xc9\x98\x34\xd8\x5a\x4b\xd4\xba\x19\x6d\x7b\x8d\x39\x1e\x57\x4a\x3a\x92\x5d\xf3\xfc\x93\xaa\xa5\x3d\x69\x2e\x04\xdf\x05\x23\x3e\xa8\x95\xf1\x51\xb9\x1e\x58\x51\x11\x1f\xa9\x0e\x51\x07\x9b\x76\xa3\x3f\x39\x0d\x32\x07\xfd\x54\x4e\xf1\xd4\x54\x54\x22\xe6\x4b\xf5\x39\x5c\x70\x92\xae\x32\xaa\x13\x5f\x6f\xd7\x2e\xbc\xbb\x35\xa7\x8e\xd1\x89\x36\xa1\xf5\xf8\x0c\x6d\x9a\x32\x78\xec\xb0\xc7\x66\x8b\x2a\x1f\xa3\xe3\x91\xb3\x39\xeb\x86\xf5\xe2\x31\xe3\xba\xdc\xf9\x20\x14\xfb\x71\x26\x79\x1a\xdd\x67\xb2\x27\xf3\x87\x7b\xe8\x13\xe4\x13\x14\x7e\xfe\x1f\xe6\xb4\x1e\x36\xb2\x2e\x33\x5f\x94\x91\xab\x23\x2f\xc1\x41\x57\x56\x9e\x51\x97\xa4\x54\x03\xd1\x79\x9c\x6a\x74\x2f\x4e\xaa\x83\x89\x15\x18\x36\x3b\x10\xb5\xc2\x7f\x45\x3b\x4f\xb0\x8c\x1a\xd8\x71\xaf\xf2\x4f\x3c\x97\x54\xdc\x21\x61\x80\x19\x37\x20\x0f\xd1\xf8\xed\x60\xdb\x14\x75\x47\xc9\xff\x1c\x04\xf3\xd6\x12\xb5\x8b\xa1\xbd\xfe\x6a\xc9\xef\x8e\xc3\xd8\x17\x78\x80\xe7\x5a\x95\x9f\xd5\x3a\x1e\x6c\xfb\x02\x39\x96\x9d\x68\x9d\x4e\xef\xec\x9f\x8d\x4f\xb4\xcd\xb3\x88\x6a\xf6\x04\x3d\x39\xed\x9e\x45\x04\x07\xef\x31\xda\xa8\x05\x7d\xce\xef\x20\x4f\xac\xaa\xa2\xa3\x32\xf9\x5b\xbc\x73\xce\x5f\xe6\x94\x4b\xd0\x47\x9a\xc7\xba\xad\x71\xff\x36\xe8\xd5\x3f\x4d\x82\x4c\x53\x99\x47\x27\x9e\xea\x7d\x6c\xf2\x85\x0c\x8f\x8b\xde\x98\xfc\x2b\xa4\xb1\x1c\xf5\x38\x63\x4a\x08\x5a\x19\x40\xbb\x45\x7f\xa8\x73\xa5\xcb\x9e\xd3\x9a\x2f\x0a\xdb\x7b\xc2\x9d\x39\xbc\xa1\xdd\x40\x4c\x23\x42\x2b\x4e\xa0\x95\x93\x30\xb3\xa3\xdd\x80\x4d\x37\xe3\xd1\x68\xb4\x25\x4f\x58\x6b\x67\x76\x8f\x39\x0f\xf5\x59\xd6\xa6\xc4\xa7\x73\x26\x8a\x3d\xc2\x29\x71\xe9\x9f\xd1\x35\xcd\x2a\x34\xc9\xf5\x97\x4f\xb8\x61\x6e\x3c\x7d\xe8\x20\x32\x73\x4f\x38\xc5\xea\xd0\xcb\xae\x61\x6e\x04\xf8\xe5\x87\xfb\xdb\x3c\xbe\x6a\x5f\x8e\x57\xbb\x8b\xe0\xf0\xcd\xd9\x3c\x35\xdd\xdb\x33\xfc\x6b\xfa\x4f\x00\x00\x00\xff\xff\xc9\x77\xe4\x95\xab\x0e\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3755, mode: os.FileMode(436), modTime: time.Unix(1455123058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

