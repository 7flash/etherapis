// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package dashboard

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xeb\x8f\xdb\xb8\x11\xff\x9e\xbf\x82\x55\x0b\xc4\x0b\x58\x92\x1f\xfb\xf4\xd9\x2e\x72\x9b\x5c\xbb\x40\x73\xbb\x68\xd2\xa2\xf7\x91\x92\x28\x8b\xbb\x94\xa8\x90\x94\x1f\x58\xf8\x7f\xef\x50\x94\xbd\xb2\x25\xd9\xf2\xc5\x69\xfb\xa1\x08\xe0\x95\xa8\x79\x71\xe6\xc7\xe1\x70\x98\xf1\x1f\x3e\x3e\xde\x7f\xfd\xed\xe9\x13\x8a\x54\xcc\xa6\xef\xc6\xfa\x0f\x62\x38\x99\x4d\x2c\x92\x58\xd3\x77\x08\x8d\x23\x82\x03\xfd\x00\x8f\x31\x51\x18\xf9\x11\x16\x92\xa8\x89\x95\xa9\xd0\xbe\xb5\xca\x9f\x22\xa5\x52\x9b\x7c\xcb\xe8\x7c\x62\xfd\xcb\xfe\xc7\x07\xfb\x9e\xc7\x29\x56\xd4\x63\xc4\x42\x3e\x4f\x14\x49\x80\xef\xe1\xd3\x84\x04\x33\xb2\xc3\x99\xe0\x98\x4c\xac\x39\x25\x8b\x94\x0b\x55\x22\x5e\xd0\x40\x45\x93\x80\xcc\xa9\x4f\xec\xfc\xa5\x8b\x68\x42\x15\xc5\xcc\x96\x3e\x66\x64\xd2\x07\x41\x46\x92\xa2\x8a\x91\xe9\x27\x15\x11\x81\x3e\x3c\x3d\x48\xf4\x11\xcb\xc8\xe3\x58\x04\x63\xd7\x7c\x2b\x08\x19\x4d\x5e\x90\x20\x6c\x62\x49\xb5\x62\x44\x46\x84\x80\xce\x48\x90\x70\x62\xe9\x39\xc8\x91\xeb\xfa\x41\xf2\x2c\x1d\x9f\xf1\x2c\x08\x19\x16\xc4\xf1\x79\xec\xe2\x67\xbc\x74\x19\xf5\xa4\xeb\x71\xae\xe4\x02\x2b\x3f\x72\x87\xce\xd0\xb9\x76\x25\xc3\x8a\x98\x61\x25\x70\xea\xc4\x34\x71\x7c\x29\x37\xb3\x3c\x83\xca\x10\x7c\x62\xe3\x05\x91\x3c\x26\xee\xa5\x73\xe5\xf4\x5c\x50\xb0\x33\x5c\xd2\x6a\xd4\x4a\x5f\xd0\x54\x21\x29\xfc\xd6\x6a\x04\xc1\xbe\x72\x7b\x4e\xff\xd2\xb9\x31\x2f\xce\x33\x08\x1c\xbb\x46\xd6\xf4\x8c\x82\xed\x80\xc7\x67\x12\xee\x61\x8f\x30\xdb\xe7\x82\xb8\x57\xce\xad\x33\x18\xba\x9e\xe0\x0b\x49\x44\xee\x92\xf3\xe8\x78\xfe\x96\x11\xb1\x72\x07\x4e\xdf\xe9\x17\x2f\x67\x94\x1e\x43\xfc\x12\xed\x6b\xad\xa0\xef\x0c\x36\x03\xe7\xd3\xa0\x16\x54\x29\x22\xec\x2d\x48\x0b\xe8\x3e\xcb\x3d\xdc\xee\xab\x1b\xbb\x9b\x24\x30\xf6\x78\xb0\x42\x39\x84\x27\x56\x8a\x83\x80\x26\xb3\x11\xba\xbe\x4c\x97\xa8\xa7\xff\x6d\xe0\x1e\xd0\x39\xa2\xc1\xc4\x2a\xd6\xb1\x16\x07\x43\x7b\xa8\x54\xab\x14\xa4\x28\xb2\x54\x26\x7c\x05\x33\x42\x73\x2c\x50\xbe\x8c\x49\x16\x3f\x11\x22\x24\x9a\xa0\xbf\xe7\x48\xf4\x01\x37\x8a\xdc\x33\x2c\x65\xe7\xb5\xa0\x46\xb0\xae\x42\x01\x4b\x2a\x27\x1d\xa1\x30\x4b\x7c\x45\x79\xd2\xb9\x40\x6f\x24\x08\xa9\x88\x4a\x27\x15\x3c\x95\x8e\x76\x49\xa7\xf4\x9e\x09\xd6\x7d\x63\x0b\xb0\xc2\xc0\x6a\x18\x20\xd3\x7d\x51\xa0\xb2\xf3\xaa\x87\x47\x48\xff\x3a\x8c\x24\x33\x15\xad\x2f\x7e\x42\x6b\xc7\xa3\x49\x90\xcb\xba\xb8\xf8\x69\xab\x6d\xdd\xdd\x3e\xce\x88\x7a\x30\xf9\x2a\x97\xd3\x68\x9e\x20\x2a\x13\x09\x2a\xd4\xf4\xd6\xb5\xc2\x20\x9e\x29\x4f\xc0\xa1\x1f\x69\xf0\x99\x67\x89\x3a\x3c\xdb\xb2\x5f\x3a\x25\xf3\x10\x92\xda\x2a\xc0\xc2\x1c\xb3\x4e\x85\xb4\x5b\xf6\x55\xf1\xa1\x7e\x72\x82\x24\x01\x11\xc7\xe6\xd4\x19\xcb\x14\x27\xc8\xd7\x51\xfb\x35\x4f\xf4\x09\x9e\x7b\x58\xd8\x3a\xf4\x00\x0d\x5a\xfe\x14\x62\x14\x62\x5b\xc8\x1c\x82\x74\x8a\x5e\x4d\x18\xb4\xef\x1c\xed\x9b\x35\x4a\xb5\x8d\x00\x4f\x90\x39\x2d\x9b\x55\x3c\x41\x58\xde\xd5\xe0\xe8\x67\xc6\xfd\x97\x96\x40\x32\xb4\xdf\x8f\x24\x4f\xcb\xa9\x81\x52\x3e\x3e\x42\xf9\x9f\x1f\x83\xa2\x42\xc3\x6b\x92\xc5\x9e\x0e\x50\x0f\x62\x4a\x63\x02\x6e\x8c\x53\x8d\xae\x73\xc2\xcb\x78\xab\x1d\xbe\x0c\xed\xd9\x01\x56\x1a\xd2\xe9\x45\x23\x63\x67\xa8\x18\x3c\x09\x82\x1a\x6c\x1e\x96\x64\x83\xc3\x54\x97\x3d\x30\xa9\x4e\x09\x90\xb9\x9b\x1d\xe3\xe4\x2e\xea\x5f\x5f\xac\x4d\x50\x37\xf0\xfc\x6e\x23\x7c\x2d\xcd\xe6\x1b\x1b\x8a\x2d\x21\x4b\xe8\xb2\x6a\xc6\x36\xc0\x17\x4e\x28\x78\xfc\x2b\x5f\x74\x2e\xd6\x75\x86\x54\xc7\x5a\x2c\x23\x21\xb8\xf8\xc0\x88\x50\x47\x97\xd0\xc1\x88\xd1\x10\x95\xd7\x4b\x44\x03\xb2\x4b\xb0\x0d\x6a\x92\x31\x56\x1a\x5f\x1f\x0d\xbb\xde\x73\x4a\x0e\x84\xed\xdf\xaa\x04\x60\x8f\xc6\xe7\xcc\x66\x33\x7b\xb8\xdd\x9f\x5a\x91\x5f\x57\xe4\x56\x49\x71\xee\xaa\xfc\x17\x90\x94\xcc\xa0\x24\xd5\x51\xb6\x7d\xa2\x97\x85\x85\x04\x67\x1b\xaa\x1a\x69\x20\xaf\x06\x0c\x64\x09\x43\x31\xd6\x5e\xb5\x95\xa0\x20\x95\x6d\xd0\xf9\x33\xf6\x5f\xc0\xf1\x88\x87\x21\x54\x9a\xa4\x8b\x52\x46\x00\xbb\x50\xac\x13\xff\x45\x57\xd3\x12\xf4\xa1\x90\x0b\x14\x40\xb9\x4d\x99\x74\x1c\xa7\x3a\x87\x5a\x1f\x54\x07\x2b\x43\x17\xc7\xd0\xf3\x24\xf8\x72\xf5\x7d\xc0\x69\x15\xf3\x22\x40\x97\xc7\x02\xff\x5a\x82\x20\x4f\xb4\xc7\xd0\x9f\x11\xd4\x33\x09\x61\x28\xff\xb5\x65\xe6\xfb\x04\x36\x21\x34\xda\x1d\x0f\x48\x88\x33\xa6\xac\xf5\x71\x08\x18\x06\x5d\x39\x41\x91\x54\x1f\xe4\x68\x58\x65\xc8\x4f\x2a\xd6\xb4\x6c\xa2\x3e\x1d\xad\x47\xa8\xde\xea\xc7\xfc\x29\x37\xf4\xd1\x44\xdf\x82\x55\x1f\x0d\x6b\x0c\xac\x8b\x6f\x93\xdd\xba\xd0\xab\x35\xda\xc4\x52\x27\x1e\x89\x66\x1c\xe9\xdd\xf5\x3f\x0f\x26\x4a\x8e\x6f\xe5\xff\xc5\x3c\x74\x2c\x91\xd4\xe5\xa6\x46\x34\xf7\x07\x4d\xe0\x99\x3e\xe1\x95\xde\x10\x50\x6a\x5c\x72\x42\xd8\x5b\xe5\xbb\x06\x33\x0d\x02\xf2\x23\xfb\xab\xf5\x17\xc2\x61\xf7\xc1\x2a\x4f\x2d\x31\xb7\xd6\xc8\x40\x13\xd6\x98\xc8\xc8\xda\x3d\xc6\xff\x45\x41\xf8\x62\x52\xe1\x0e\x31\x93\x35\xec\x67\x41\xd0\x3f\xf5\x12\xfe\x3f\x7e\xde\xf0\x33\xd7\x0e\xa9\x47\x4f\x43\x7e\xd8\x4b\x87\x75\x7c\x27\x67\x96\x9c\x05\x8a\x2e\xd8\xa9\x4a\x4c\x66\x20\xff\xb5\xe1\x88\x4a\x53\x12\x14\x6f\x11\x9f\x03\x6e\x1a\x45\x69\x61\x6f\xcd\xab\x26\x0a\x71\xe8\x73\x2e\x62\xfa\x05\xea\x58\xea\x93\xb1\x0b\xcf\xc7\x89\x33\x4f\x1f\x6f\xa1\x20\x6c\x47\xff\xb8\x20\x41\x3b\xca\xbf\xd1\x98\xaa\x76\xa4\x5f\xb9\xc2\x3a\x44\xb4\xad\x68\x2c\x15\xa0\xf1\x5b\x06\x05\xe4\x31\x0e\xf8\x7e\xc0\x67\x9a\xfb\xa0\xcf\xc7\x4a\xc7\xff\x3b\x63\x12\x4c\xf7\xd2\x0e\xa8\x3d\x18\x67\xc3\xd4\x5b\x0e\xef\x7a\x43\x7c\x75\x45\x7a\xb7\xbd\x41\xd8\xeb\xf7\x7b\x37\x37\x9e\x37\x1c\x0e\x6f\x07\xb7\x83\xc1\xdd\xf0\x26\xb8\xbb\x24\xa1\x77\x13\xb6\x93\x37\xec\x5f\xa2\x5f\x68\x92\x90\x55\x3b\xfa\xab\x5e\xef\x24\xfa\xbe\xd3\x37\xe7\xd7\x96\xe2\x51\x4c\x93\x4c\xc1\xd6\x88\x67\x47\x3d\x72\x38\x8c\x3f\x36\x0a\x77\xa1\x7f\x1d\x92\x30\xb8\x09\x87\x43\x1f\x0f\xee\x08\xe9\xdf\x84\x03\x2f\x24\xfe\xdd\xe5\xe5\xf5\xdd\x15\xb9\x0a\x07\x77\x3e\x6e\x19\x85\x13\xbd\xd4\xef\x9d\x46\x7d\x92\x70\xa8\xd3\xc9\x02\x4e\xbf\x50\x71\x07\x67\x08\x03\x7c\x3d\xb4\x5a\xe0\xb3\x4e\x84\x0d\xc9\xb7\xbe\xda\x6b\x2e\x03\x7f\x77\xc1\x76\xf4\xf0\xf8\x19\x8b\x17\xf2\x3f\xbd\xe1\x9e\xba\xbf\x9d\x5a\xeb\x1f\xaa\xf4\x3f\x3c\x3d\x14\x1e\xaa\xdb\x81\x5b\x15\x6a\x07\x37\xd6\xdf\x08\x8e\xba\x68\xc5\x33\xb4\xa0\x32\x82\x5a\x1d\x8d\x9e\x7e\x48\x98\xb7\xd7\x2d\x47\x22\x7d\x6a\x33\x6b\xc7\x2e\x0a\x28\x59\x02\x8b\x2e\x0f\xbb\x28\xce\xfd\x36\x42\xba\xd6\xec\xee\xd0\xe1\x94\x9a\x93\x51\xf1\x51\x0f\xfc\x02\x27\xdf\x4c\xc0\x88\x65\xd5\x37\xc0\x18\xc7\xc1\x43\xa1\xe0\x40\xe3\xeb\xad\x93\xd7\x6c\xcd\xba\xbe\xa1\xa5\x35\x7c\x2e\xc8\x4e\x52\x61\x26\xb1\xd1\x60\xaa\xe3\x7a\x15\x30\xd1\x7b\xcc\x58\x49\x7e\xde\x95\x2c\x4e\xb4\xbb\xba\xfe\x64\x3a\x98\xaf\x40\x31\x42\x39\x99\x6e\x7b\x7d\x5d\xa5\xe0\xa4\xf7\xcf\x92\x27\xef\xbb\xc8\xc7\x7e\x44\x36\x73\xdc\xf1\x71\x21\x72\x54\xe9\x9d\xef\xc1\x6b\xbb\x76\x4d\xbb\xea\x2d\x12\x68\x32\xd1\x5a\xab\x1c\x15\x2f\x1c\x0b\xe7\x4e\xf7\x31\x77\xc8\xde\x7b\x61\xab\xb1\x70\xe7\x5b\xb9\xfb\xba\x3b\x3f\xa2\x9b\x5e\xa5\xd9\x2d\x23\xd1\xcd\x4f\xbe\x99\xec\xea\x8f\x55\xbb\x9b\xad\x2e\x20\x52\x36\x1b\x66\x5e\xb5\xbb\xe8\xd5\x38\xb9\xee\x22\x72\x6f\x1a\x1d\xc5\xe1\xc0\x04\x39\xa6\x73\xb1\xc7\x59\x9e\x45\x39\xfb\x9d\xb1\xaf\x5a\x97\x88\x12\x3c\xaf\x36\x34\x51\xd1\xd7\x0c\xe9\x92\x04\xb6\xe2\x69\xab\xc3\x4a\xa2\x30\x78\x4a\xd4\x1f\x56\xf6\xa8\x0b\x05\x3a\xe1\x36\x70\x00\x0f\xae\xe1\xf0\x04\x4e\x82\xcd\xc5\xeb\x1f\x2d\x38\x6e\xde\x33\xea\xbf\x14\x1d\xa1\xed\xfa\x5f\x37\x5c\x23\xe3\x13\x36\xd4\xd2\x35\x98\x51\x6e\xd5\xd8\x03\x67\x34\x86\x53\xdd\xa9\x2b\x1e\x9a\x26\x93\xb1\x3d\xee\x8d\x93\xe1\x4f\xf3\x69\x8a\xd1\x29\xb8\xe1\xc0\x6c\x4d\x2e\x5a\xd7\x36\x9f\x65\xc4\xd3\x14\xb0\x66\x7b\x58\x02\x51\xd1\x6a\x2c\x6f\x57\x18\x86\x40\x45\x43\xfd\x91\xb1\x76\xc7\xc2\x62\x22\x82\xce\xa2\xa6\x93\x24\x30\xed\x5e\x08\xea\xb4\x55\x4c\xa3\xc8\x77\x6b\xbd\x9e\x26\x96\x0b\xaf\xee\xbc\xe7\x92\x82\xdc\xcd\xaf\x8b\xac\xcd\xd5\xce\xe4\xb5\xdf\xeb\xf5\xea\xda\x12\x7b\x6a\x8a\xfb\xa2\xf6\x7a\x34\x16\x5b\xaa\x39\x53\x69\x06\x7e\x3b\xde\xb1\x6e\x5e\x55\xe3\x52\x4f\x5f\x97\x53\x93\xd7\xdd\x1c\x6d\x32\x57\x63\x07\x47\xb7\xe0\x2a\x6c\xf9\x66\x55\xcb\x62\x7a\x2e\x27\x30\x14\x45\x63\x85\xc3\x6c\x81\xbf\xb3\x33\x54\x5f\xc3\x98\x27\x5d\xc2\x04\xfb\x25\xcc\xc7\xc7\xcf\x8e\x49\x96\x9d\xf1\x5b\x7d\xe3\x4e\x61\xa3\xe4\x7e\x96\xdf\xc6\x40\x39\xf3\x89\x11\xfd\xf8\xf3\xea\x21\xe8\xbc\x2f\xee\xbc\xdf\xbf\x65\xe8\xad\xd4\xd2\xd6\x50\xec\x2d\xd6\x5f\x29\x6c\x5e\xef\x8c\xb5\xe5\x1b\x77\x53\xf7\x43\x45\x98\xff\xc7\x9c\x7f\x07\x00\x00\xff\xff\x24\x9a\xf7\xb3\xa9\x23\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 9129, mode: os.FileMode(436), modTime: time.Unix(1455269309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

